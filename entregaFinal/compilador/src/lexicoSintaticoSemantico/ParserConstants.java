package lexicoSintaticoSemantico;

public interface ParserConstants {
    int START_SYMBOL = 40;

    int FIRST_NON_TERMINAL = 40;
    int FIRST_SEMANTIC_ACTION = 72;

    int[][] PARSER_TABLE = {
            { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, 2, -1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, -1, 1, -1, 2, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1,
                    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, -1, -1, -1, -1, -1, 4, -1, 4, -1, -1, -1, -1, 4, 4, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, 6, -1, -1, -1, -1, 5, -1, 5, 6, 6, -1, -1, 5, 5, -1, -1, 6, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, -1, -1, -1, -1, -1, 7, -1, 10, -1, -1, -1, -1, 9, 8, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1,
                    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                    -1, -1, -1, -1, -1, -1, -1, -1, 13, 14, -1, -1, 14 },
            { -1, 15, -1, -1, -1, -1, -1, -1, -1, 15, 15, -1, -1, -1, -1, -1, -1, 15, -1, 15, -1, -1, -1, -1, -1, -1,
                    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, 16, -1, -1, -1, -1, -1, 17, -1, 16, 16, 17, -1, -1, -1, -1, -1, 16, -1, 16, -1, 17, 17, -1, -1, -1,
                    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, 18, -1, -1, -1, -1, -1, -1, -1, 20, 22, -1, -1, -1, -1, -1, -1, 19, -1, 21, -1, -1, -1, -1, -1, -1,
                    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1,
                    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, 26, 26, 26, 26, 26, -1, -1, -1, -1, -1, -1, 26, -1, -1, -1, -1, -1, -1, -1, 26, -1, -1, -1, -1, 26,
                    -1, -1, -1, -1, 26, 26, -1, -1, -1, -1, -1, 26, -1 },
            { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                    -1, -1, -1, -1, -1, -1, -1, -1, 27, -1, -1, -1, 28 },
            { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, -1,
                    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, -1, -1, -1, -1, -1, -1, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, -1, -1, -1, -1, -1, -1, 31, -1, -1, -1, 32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, 34, -1, -1, -1,
                    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, 36, 36, 36, 36, 36, -1, -1, -1, -1, -1, -1, 36, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1, -1, -1, 36,
                    -1, -1, -1, -1, 36, 36, -1, -1, -1, -1, -1, 36, -1 },
            { -1, 37, -1, -1, -1, -1, -1, 37, -1, 37, 37, -1, -1, -1, -1, -1, -1, 37, -1, 37, -1, -1, -1, 38, 39, -1,
                    -1, -1, -1, -1, -1, -1, -1, -1, 37, 37, -1, -1, 37 },
            { -1, 40, 40, 40, 40, 40, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, 43,
                    -1, -1, -1, -1, 40, 40, -1, -1, -1, -1, -1, 40, -1 },
            { -1, 44, 44, 44, 44, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                    -1, -1, -1, -1, 44, 44, -1, -1, -1, -1, -1, 44, -1 },
            { -1, 45, -1, -1, -1, -1, -1, 45, -1, 45, 45, -1, -1, -1, -1, -1, -1, 45, -1, 45, -1, -1, -1, 45, 45, -1,
                    46, 46, 46, 46, -1, -1, -1, -1, 45, 45, -1, -1, 45 },
            { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                    47, 48, 49, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
            { -1, 51, 51, 51, 51, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                    -1, -1, -1, -1, 51, 51, -1, -1, -1, -1, -1, 51, -1 },
            { -1, 52, -1, -1, -1, -1, -1, 52, -1, 52, 52, -1, -1, -1, -1, -1, -1, 52, -1, 52, -1, -1, -1, 52, 52, -1,
                    52, 52, 52, 52, 53, 54, -1, -1, 52, 52, -1, -1, 52 },
            { -1, 55, 55, 55, 55, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                    -1, -1, -1, -1, 55, 55, -1, -1, -1, -1, -1, 55, -1 },
            { -1, 56, -1, -1, -1, -1, -1, 56, -1, 56, 56, -1, -1, -1, -1, -1, -1, 56, -1, 56, -1, -1, -1, 56, 56, -1,
                    56, 56, 56, 56, 56, 56, 57, 58, 56, 56, -1, -1, 56 },
            { -1, 59, 60, 61, 62, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                    -1, -1, -1, -1, 65, 66, -1, -1, -1, -1, -1, 64, -1 }
    };

    int[][] PRODUCTIONS = {
            { 173, 17, 41, 48, 12, 174 },
            { 42 },
            { 0 },
            { 16, 43 },
            { 45, 175, 46, 176, 36, 44 },
            { 43 },
            { 0 },
            { 7 },
            { 15 },
            { 14 },
            { 9 },
            { 19 },
            { 2, 177, 47 },
            { 35, 46 },
            { 0 },
            { 50, 36, 49 },
            { 48 },
            { 0 },
            { 52 },
            { 53 },
            { 54 },
            { 57 },
            { 51 },
            { 2, 177, 37, 61, 178 },
            { 18, 38, 46, 179, 39 },
            { 10, 38, 55, 39 },
            { 61, 180, 56 },
            { 35, 55 },
            { 0 },
            { 181, 20, 61, 58, 12, 182 },
            { 8, 183, 61, 184, 48, 185, 59 },
            { 58 },
            { 0 },
            { 11, 186, 48, 60, 61 },
            { 23, 187 },
            { 22, 188 },
            { 63, 62 },
            { 0 },
            { 24, 63, 189, 62 },
            { 25, 63, 190, 62 },
            { 64 },
            { 21, 191 },
            { 13, 192 },
            { 26, 63, 193 },
            { 67, 65 },
            { 0 },
            { 66, 194, 67, 195 },
            { 27 },
            { 28 },
            { 29 },
            { 30 },
            { 69, 68 },
            { 0 },
            { 31, 69, 196, 68 },
            { 32, 69, 197, 68 },
            { 71, 70 },
            { 0 },
            { 33, 71, 198, 70 },
            { 34, 71, 199, 70 },
            { 2, 200 },
            { 3, 201 },
            { 4, 202 },
            { 5, 203 },
            { 6, 204 },
            { 38, 61, 39 },
            { 31, 71 },
            { 32, 71, 205 }
    };

    String[] PARSER_ERROR = {
            "",
            "era esperado end", // "Era esperado fim de programa",
            "esperado identificador", // "Era esperado identificador",
            "esperado int", // "Era esperado cte_int",
            "esperado float", // "Era esperado cte_float",
            "esperado char", // "Era esperado cte_char",
            "esperado string", // "Era esperado cte_string",
            "esperado bool", // "Era esperado pr_bool",
            "esperado case", // "Era esperado pr_case",
            "esperado char", // "Era esperado pr_char",
            "esperado echo", // "Era esperado pr_echo",
            "esperado do", // "Era esperado pr_do",
            "esperado end", // "Era esperado pr_end",
            "esperado false", // "Era esperado pr_false",
            "esperado float", // "Era esperado pr_float",
            "esperado int", // "Era esperado pr_int",
            "esperado local", // "Era esperado pr_local",
            "esperado module", // "Era esperado pr_module",
            "esperado request", // "Era esperado pr_request",
            "esperado string", // "Era esperado pr_string",
            "esperado switch", // "Era esperado pr_switch",
            "esperado true", // "Era esperado pr_true",
            "esperado until", // "Era esperado pr_until",
            "esperado while", // "Era esperado pr_while",
            "esperado \"&\"", // "Era esperado \"&\"",
            "esperado \"|\"", // "Era esperado \"|\"",
            "esperado \"!\"", // "Era esperado \"!\"",
            "esperado \"==\"", // "Era esperado \"==\"",
            "esperado \"!=\"", // "Era esperado \"!=\"",
            "esperado \"<\"", // "Era esperado \"<\"",
            "esperado \">\"", // "Era esperado \">\"",
            "esperado \"+\"", // "Era esperado \"+\"",
            "esperado \"-\"", // "Era esperado \"-\"",
            "esperado \"*\"", // "Era esperado \"*\"",
            "esperado \"/\"", // "Era esperado \"/\"",
            "esperado \",\"", // "Era esperado \",\"",
            "esperado \";\"", // "Era esperado \";\"",
            "esperado \"=\"", // "Era esperado \"=\"",
            "esperado \"(\"", // "Era esperado \"(\"",
            "esperado \")\"", // "Era esperado \")\"",
            "esperado module", // "<programa> inv�lido TESTE",
            "esperado local $", // "<op_declaracao_de_variavel> inv�lido",
            "esperado local", // "<declaracao_de_variavel> inv�lido",
            "esperado int float char string ;", // "<corpo_dec_variavel> inv�lido",
            "esperado int float char string ; EOF", // "<corpo_dec_variavel_1> inv�lido",
            "esperado int float char string", // "<tipo> inv�lido",
            "esperado identificador", // "<lista_ids> inv�lido",
            "esperado identificador , ) ;", // "<lista_ids_1> inv�lido",
            "esperado comando; lista_de_comandos_1", // "<lista_de_comandos> inv�lido",
            "esperado lista_de_comandos EOF", // "<lista_de_comandos_1> inv�lido",
            "esperado entrada_de_dados saida_de_dados selecao repeticao", // "<comando> inv�lido",
            "esperado do", // "<repeticao> inv�lido",
            "esperado identificador", // "<atribuicao> inv�lido",
            "esperado request", // "<entrada_de_dados> inv�lido",
            "esperado echo", // "<saida_de_dados> inv�lido",
            "esperado expressao", // "<lista_expressoes> inv�lido",
            "esperado expressao ,", // "<lista_expressoes_1> inv�lido",
            "esperado switch", // "<selecao> inv�lido",
            "esperado case", // "<op_case> inv�lido",
            "esperado case", // "<op_case_1> inv�lido",
            "esperado while until", // "<op_repeticao> inv�lido",
            "esperado elemento", // "<expressao> inv�lido",
            "esperado & elemento | ;", // "<expressao_1> inv�lido",
            "esperado realacional true false !", // "<elemento> inv�lido",
            "esperado aritmetica", // "<relacional> inv�lido",
            "esperado operador_relacional", // "<relacional_1> inv�lido",
            "esperado == | != | < | >", // "<operador_relacional> inv�lido",
            "esperado termo", // "<aritmetica> inv�lido",
            "esperado +", // "<aritmetica_1> inv�lido",
            "esperado termo", // "<termo> inv�lido",
            "esperado * <fator> /", // "<termo_1> inv�lido",
            "esperado identificador cte_int cte_float cte_char cte_string ( expressao ) + - fator", // "<fator>
                                                                                                    // inv�lido"
    };
}
